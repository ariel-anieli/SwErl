//
//  File.swift
//  
//Copyright (c) 2023 Lee Barney
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
//
//  Created by Lee Barney on 9/25/23.
//
import Foundation

//This is the protocol is used to express the behavior of
/**
 This protocol enforces the types of behaviors required of every state machine in SwErl. It extends the OTPActor behavior like all non-process SwErl actors. 
 */
public protocol statem_behavior:OTPActor_behavior{
    /**
     This function is used to do any logic required prior to linking the name, state machine sub-type, and a dispatch queue to execute all the functions that are used with the occurance generated by the gen\_statem.start\_link function. All implementations of this protocol function declaration should return early or eventually call the gen\_statem.start\_link function.
       - Parameters:
        - queueToUse: the desired queue for the processes should use. Default:main()
         - name: a name to link to an occurance of the statem sub-type.
         - actor_type: the sub-type of statem being linked to.
         - initial_data: any desired data used to initialize the statem sub-type occurance's state
      - Value: a Pid optional that uniquely identifies the occurance of the sub-type of gen\_statem the name is linked to
      - Throws: any exception thrown from the sub-type's _initialize\_state_ function
      - Author:
        Lee S. Barney
      - Version:
        0.1
     */
    static func start_link(queueToUse:DispatchQueue?, name:String,actor_type:any statem_behavior,initial_data:Any)throws->Pid?
    
    /**
     This hook function is used to do logic, if any, required to convert the _initial\_data_ passed to the generic state machine sub-type's _start\_link_ function to an initial state for the sub-type occurance.
     
     This function is only executed once by the framework for each state machine sub-type occurance. Executing it directly has no effect.
       - Parameters:
         - initial_data: any desired data used to create the statem sub-type occurance's state
      - Value: the data to be used as the initial state of the state machine sub-type occurance
      - Throws: any exception thrown by the code implementation of this function
      - Author:
        Lee S. Barney
      - Version:
        0.1
     */
    static func initialize_state(initial_data:Any)throws ->Any
    
    /**
     This hook function is used to react to a request to unlink request. At this point, when this function executes, the machine sub-type's occurance has already been unlinked.
       - Parameters:
         - reason: the reason given in the request to unlink the occurance
         - current_state:
      - Value: void
      - Throws: any exception thrown by the code implementation of this function
      - Author:
        Lee S. Barney
      - Version:
        0.1
     */
    static func unlink(reason:String,current_state:Any)
    
    /**
     This hook function is used to deal with the results of using the _gen\_statem.cast_ function. The logic it executes calculates an updated state for the state machine.
       - Parameters:
         - message: any data or data structure
         - current_state: the existing state of the state machine
      - Value: an updated state that is the result of receiving the message
      - Author:
        Lee S. Barney
      - Version:
        0.1
     */
    static func handle_event_cast(message:Any,current_state:Any)->Any
}
/**
 This enumeration has, as properties, a set of generic functions that conduct
 the communication required of all statem behaviors. These functions ensure
 that the hook functions in each custom state machine are executed in the
 correct order and store updated states correctly.
 
 These functions also ensure that each custom state machine is registered
 properly so it can be used from anywhere in the application's code base.
 */
public enum gen_statem:OTPActor_behavior{
    /**
     This function registers, by name, and prepares a specified sub-type of a generic state machine using some specified data. Once this function completes, the sub-type occurance can be used. All functions applied to the occurance will execute on the main or any other thread depending on the DispatchQueue stated. By default, the global queue will be used, but if the main() queue is passed as a parameter, the sub-type's functions will all run on the main/UI thread.
      - Parameters:
        - queueToUse: the desired queue for the processes should use. Default:main()
        - name: a name to link to an occurance of the statem sub-type.
        - actor_type: the sub-type of statem being linked to.
        - initial_data: any desired data used to initialize the statem sub-type occurance's state
      - Value: a Pid that uniquely identifies the occurance of the sub-type of gen\_statem the name is linked to
      - Author:
        Lee S. Barney
      - Version:
        0.1
     */
    static func start_link<T:statem_behavior>(queueToUse:DispatchQueue = DispatchQueue.global(),name:String,actor_type:T.Type,initial_data:Any) throws->Pid{
        let initial_state = try actor_type.initialize_state(initial_data: initial_data)
        //register the actor by name. name => (actor_type,initial_data)
        return try Registrar.link((actor_type,initial_state),name: name)
    }
    /**
     This function unlinks the information of an occurance of a generic state machine's sub-type. Other occurances of the sub-type registered under other names are unaffected.
     
     After the name and Pid have been unlinked, the state machine sub-type's unlink function is called.
     
     If the name does not match a linked occurance of a state machine sub-type, nothing needs to be unlinked and the state of the application is still valid. Therefore, no exceptions are thrown.
      - Parameters:
        - name: a name of a registered occurance of a statem sub-type occurance.
      - Value: Void
      - Author:
        Lee S. Barney
      - Version:
        0.1
     */
    static func unlink(name:String, reason:String){
        guard let PID = Registrar.instance.processesLinkedToName[name] else{
            return//Quiely fail since the statem was not registered
        }
        guard let (type,stored_state) = Registrar.instance.OTPActorsLinkedToPid[PID] else{
            return//Quiely fail since the statem was not registered
        }
        guard let statem = type as? statem_behavior.Type else{
            return//Quiely fail since the statem was not registered
        }
        Registrar.unlink(name)
        statem.unlink(reason: reason, current_state: stored_state as Any)
    }
    
    /**
     This function sends a message to a registered occurance of a generic state machine sub-type. Messages are used to update the state of the state machine as defined in the state machine sub-type's handle\_event\_cast function.
      - Parameters:
        - name: a name of a registered occurance of a statem sub-type occurance.
        - message: any type of data expected by the handle\_event\_cast function of the generic state machine's sub-type.
      - Value: Void
      - Throws: SwErlError when the name isn't registered/linked, a Pid was not previously associated with the state machine sub-type's occurance, the name is not linked to a sub-type of gen\_statem, or the sub-type occurance has no state to track.
      - Author:
        Lee S. Barney
      - Version:
        0.1
     */
    //the value of handle_event_cast is the updated state
    //if there is no pid associated with that name, throw an exception
    static func cast(name:String,message:Any)throws{
        guard let PID = Registrar.instance.processesLinkedToName[name] else{
            throw SwErlError.nameNotRegistered
        }
        //if the pid hasn't been registered correctly, throw an exception.
        guard let (type,stored_state) = Registrar.instance.OTPActorsLinkedToPid[PID] else{
            throw SwErlError.notRegisteredByPid
        }
        
        //this function only works on enums with the statem behavior.
        //if the type is anything except a statem_behavior, throw an exception.
        guard let statem = type as? statem_behavior.Type else{
            throw SwErlError.notStatem_behavior
        }
        //state machines always have a stored state.
        //if this one doesn't, do nothing.
        guard let state = stored_state else{
            throw SwErlError.statem_behaviorWithoutState
        }
        let updated_state = statem.handle_event_cast(message: message, current_state: state)
        Registrar.instance.OTPActorsLinkedToPid.updateValue((statem,updated_state), forKey: PID)
    }
}

