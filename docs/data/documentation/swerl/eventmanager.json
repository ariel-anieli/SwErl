{"sections":[],"metadata":{"externalID":"s:5SwErl12EventManagerO","symbolKind":"enum","role":"symbol","roleHeading":"Enumeration","navigatorTitle":[{"kind":"identifier","text":"EventManager"}],"modules":[{"name":"SwErl"}],"title":"EventManager","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventManager"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager"},"topicSections":[{"identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/link(queueToUse:name:intialHandlers:)","doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/notify(PID:message:)","doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/notify(name:message:)","doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/unlink(name:)"],"title":"Type Methods"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior"],"title":"Conforms To","type":"conformsTo"}],"variants":[{"paths":["\/documentation\/swerl\/eventmanager"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SwErl\/documentation\/SwErl"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventManager","kind":"identifier"}],"languages":["swift"]}]},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Ensure the correct sequential execution of hook functions in custom event handlers.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Properly store updated states after each event handling."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Notify all event handlers associated with the manager upon receiving an event notification."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Register each custom event manager appropriately for global accessibility within the application’s code base.","type":"text"}]}]}]},{"inlineContent":[{"text":"These mechanisms are fundamental to maintaining the integrity and order of event handling and state management across different parts of the application, facilitating a consistent and reliable event-driven architecture.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"abstract":[{"text":"Enumeration containing a set of generic functions responsible for managing communication within _EventManager_s. These functions are designed to:","type":"text"}],"references":{"doc://SwErl/documentation/SwErl/OTPActor_behavior":{"navigatorTitle":[{"text":"OTPActor_behavior","kind":"identifier"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior","role":"symbol","url":"\/documentation\/swerl\/otpactor_behavior","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}],"title":"OTPActor_behavior","abstract":[{"type":"text","text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swift’s "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" BIT (Built In Type)."}],"type":"topic"},"doc://SwErl/documentation/SwErl/EventManager/notify(name:message:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"notify"},{"kind":"text","text":"("},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"message"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SwErlMessage","preciseIdentifier":"s:5SwErl0aB7Messagea"},{"kind":"text","text":")"}],"url":"\/documentation\/swerl\/eventmanager\/notify(name:message:)","role":"symbol","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/notify(name:message:)","title":"notify(name:message:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Sends a concurrent, non-blocking message to a registered occurrence of an event manager. This function does not perform any updates to the state machine’s state."}]},"doc://SwErl/documentation/SwErl":{"identifier":"doc:\/\/SwErl\/documentation\/SwErl","type":"topic","title":"SwErl","abstract":[{"text":"Concurrency - Erlang style","type":"text"}],"kind":"symbol","url":"\/documentation\/swerl","role":"collection"},"doc://SwErl/documentation/SwErl/EventManager/unlink(name:)":{"type":"topic","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/unlink(name:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unlink","kind":"identifier"},{"text":"(","kind":"text"},{"text":"name","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol","url":"\/documentation\/swerl\/eventmanager\/unlink(name:)","abstract":[{"text":"Unlinks the information of an occurrence of an event manager. This operation does not affect other occurrences of the sub-type registered under different names. If the specified name does not match any linked occurrence of an event manager, the application’s state remains valid, and no exceptions are thrown, resulting in a quiet failure.","type":"text"}],"title":"unlink(name:)"},"doc://SwErl/documentation/SwErl/EventManager/notify(PID:message:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"notify"},{"kind":"text","text":"("},{"kind":"externalParam","text":"PID"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:5SwErl3PidV","text":"Pid"},{"kind":"text","text":", "},{"kind":"externalParam","text":"message"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SwErlMessage","preciseIdentifier":"s:5SwErl0aB7Messagea"},{"kind":"text","text":")"}],"url":"\/documentation\/swerl\/eventmanager\/notify(pid:message:)","role":"symbol","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/notify(PID:message:)","title":"notify(PID:message:)","kind":"symbol","type":"topic","abstract":[]},"doc://SwErl/documentation/SwErl/EventManager":{"navigatorTitle":[{"text":"EventManager","kind":"identifier"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager","role":"symbol","url":"\/documentation\/swerl\/eventmanager","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventManager","kind":"identifier"}],"title":"EventManager","abstract":[{"type":"text","text":"Enumeration containing a set of generic functions responsible for managing communication within _EventManager_s. These functions are designed to:"}],"type":"topic"},"doc://SwErl/documentation/SwErl/EventManager/link(queueToUse:name:intialHandlers:)":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"link"},{"kind":"text","text":"("},{"kind":"externalParam","text":"queueToUse"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"DispatchQueue","preciseIdentifier":"s:8Dispatch0A5QueueC"},{"kind":"text","text":", "},{"kind":"externalParam","text":"name"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"intialHandlers"},{"kind":"text","text":": ["},{"kind":"typeIdentifier","text":"SwErlStatelessHandler","preciseIdentifier":"s:5SwErl0aB16StatelessHandlera"},{"kind":"text","text":"]) "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Pid","preciseIdentifier":"s:5SwErl3PidV"}],"url":"\/documentation\/swerl\/eventmanager\/link(queuetouse:name:intialhandlers:)","role":"symbol","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager\/link(queueToUse:name:intialHandlers:)","title":"link(queueToUse:name:intialHandlers:)","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Registers and prepares a specified event manager with a given name, associating it with a list of SwErl process IDs. These processes act as handlers for events managed by the event manager. Post-registration, the occurrence can be utilized for event handling, with all related function executions occurring on either the main or a specified thread based on the provided "},{"type":"codeVoice","code":"DispatchQueue"},{"type":"text","text":". By default, operations use the global queue, but specifying "},{"code":"DispatchQueue.main()","type":"codeVoice"},{"type":"text","text":" directs execution to the main\/UI thread."}]}}}