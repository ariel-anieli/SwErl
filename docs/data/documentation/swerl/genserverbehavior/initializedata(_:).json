{"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/initializeData(_:)"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initializeData","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"data","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?) -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?","kind":"text"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"name":"state","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The initial state provided by "},{"type":"codeVoice","code":"Genserver"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"startLink"},{"type":"text","text":" function."}]}]}]},{"content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"The modified or verified state data used in future interactions.","type":"text"}]}],"kind":"content"}],"kind":"symbol","metadata":{"role":"symbol","symbolKind":"method","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initializeData","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?) -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?","kind":"text"}],"title":"initializeData(_:)","roleHeading":"Type Method","modules":[{"name":"SwErl"}],"required":true,"externalID":"s:5SwErl17GenServerBehaviorP14initializeDatayypSgAEFZ"},"abstract":[{"text":"Called during server startup, allowing for the initial state modification or validation.","type":"text"}],"variants":[{"paths":["\/documentation\/swerl\/genserverbehavior\/initializedata(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/SwErl\/documentation\/SwErl","doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior"]]},"references":{"doc://SwErl/documentation/SwErl/GenServerBehavior/initializeData(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"initializeData","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?) -> ","kind":"text"},{"text":"Any","kind":"keyword"},{"text":"?","kind":"text"}],"title":"initializeData(_:)","role":"symbol","type":"topic","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/initializeData(_:)","required":true,"kind":"symbol","url":"\/documentation\/swerl\/genserverbehavior\/initializedata(_:)","abstract":[{"type":"text","text":"Called during server startup, allowing for the initial state modification or validation."}]},"doc://SwErl/documentation/SwErl/GenServerBehavior":{"abstract":[{"text":"Defines the behavior for a generic server (","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":") in the SwErl framework.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"GenServerBehavior"},{"text":" protocol allows for the creation of stateful SwErl processes that support synchronous calls and replies through a separate API.","type":"text"},{"text":" ","type":"text"},{"text":"This protocol is designed for user-defined processes, enabling the encapsulation of process state within the registry.","type":"text"},{"text":" ","type":"text"},{"text":"Types conforming to this protocol are utilized to define the functionality of user-created ","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":" instances.","type":"text"},{"text":" ","type":"text"},{"text":"Multiple, separate ","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":" instances can be initiated from a single conforming type. Each instance operates within its own execution context as a separate process.","type":"text"},{"text":" ","type":"text"},{"text":"Conforming types are recommended to be static, leveraging SwErl infrastructure for state management.","type":"text"}],"role":"symbol","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","title":"GenServerBehavior","type":"topic","kind":"symbol","url":"\/documentation\/swerl\/genserverbehavior","navigatorTitle":[{"text":"GenServerBehavior","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GenServerBehavior","kind":"identifier"}]},"doc://SwErl/documentation/SwErl":{"type":"topic","abstract":[{"type":"text","text":"Concurrency - Erlang style"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl","url":"\/documentation\/swerl","title":"SwErl","role":"collection","kind":"symbol"}}}