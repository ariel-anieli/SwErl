{"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Defines the behavior for a generic server ("},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":") in the SwErl framework."},{"text":" ","type":"text"},{"type":"codeVoice","code":"GenServerBehavior"},{"text":" protocol allows for the creation of stateful SwErl processes that support synchronous calls and replies through a separate API.","type":"text"},{"text":" ","type":"text"},{"text":"This protocol is designed for user-defined processes, enabling the encapsulation of process state within the registry.","type":"text"},{"text":" ","type":"text"},{"text":"Types conforming to this protocol are utilized to define the functionality of user-created ","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":" instances.","type":"text"},{"text":" ","type":"text"},{"text":"Multiple, separate ","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":" instances can be initiated from a single conforming type. Each instance operates within its own execution context as a separate process.","type":"text"},{"text":" ","type":"text"},{"text":"Conforming types are recommended to be static, leveraging SwErl infrastructure for state management.","type":"text"}],"seeAlsoSections":[{"title":"GenServer - Generic Servers","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/GenServer"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior"},"hierarchy":{"paths":[["doc:\/\/SwErl\/documentation\/SwErl"]]},"relationshipsSections":[{"title":"Inherits From","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior"],"kind":"relationships","type":"inheritsFrom"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GenServerBehavior","kind":"identifier"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior","text":"OTPActor_behavior","kind":"typeIdentifier","preciseIdentifier":"s:5SwErl17OTPActor_behaviorP"}]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"content":[{"inlineContent":[{"type":"text","text":"Sylvia Deal"}],"type":"paragraph"}],"type":"aside","name":"Author","style":"note"},{"content":[{"inlineContent":[{"type":"text","text":"0.1"}],"type":"paragraph"}],"type":"aside","name":"Version","style":"note"}]}],"topicSections":[{"title":"Type Methods","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/handleCall(request:data:)","doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/handleCast(request:data:)","doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/initializeData(_:)","doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/terminateCleanup(reason:data:)"]}],"sections":[],"variants":[{"paths":["\/documentation\/swerl\/genserverbehavior"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","metadata":{"roleHeading":"Protocol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenServerBehavior"}],"role":"symbol","modules":[{"name":"SwErl"}],"title":"GenServerBehavior","navigatorTitle":[{"kind":"identifier","text":"GenServerBehavior"}],"externalID":"s:5SwErl17GenServerBehaviorP","symbolKind":"protocol"},"references":{"doc://SwErl/documentation/SwErl/OTPActor_behavior":{"navigatorTitle":[{"text":"OTPActor_behavior","kind":"identifier"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior","role":"symbol","url":"\/documentation\/swerl\/otpactor_behavior","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}],"title":"OTPActor_behavior","abstract":[{"type":"text","text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swiftâ€™s "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" BIT (Built In Type)."}],"type":"topic"},"doc://SwErl/documentation/SwErl/GenServerBehavior/terminateCleanup(reason:data:)":{"url":"\/documentation\/swerl\/genserverbehavior\/terminatecleanup(reason:data:)","required":true,"abstract":[{"text":"Executed before a server is removed from the registry, typically for cleanup based on the provided termination reason.","type":"text"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/terminateCleanup(reason:data:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"terminateCleanup","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"reason"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?)"}],"type":"topic","title":"terminateCleanup(reason:data:)","role":"symbol","kind":"symbol"},"doc://SwErl/documentation/SwErl/GenServerBehavior/initializeData(_:)":{"abstract":[{"type":"text","text":"Called during server startup, allowing for the initial state modification or validation."}],"type":"topic","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/initializeData(_:)","required":true,"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"initializeData"},{"kind":"text","text":"("},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?"}],"url":"\/documentation\/swerl\/genserverbehavior\/initializedata(_:)","kind":"symbol","title":"initializeData(_:)","role":"symbol"},"doc://SwErl/documentation/SwErl":{"identifier":"doc:\/\/SwErl\/documentation\/SwErl","type":"topic","title":"SwErl","abstract":[{"text":"Concurrency - Erlang style","type":"text"}],"kind":"symbol","url":"\/documentation\/swerl","role":"collection"},"doc://SwErl/documentation/SwErl/GenServerBehavior/handleCall(request:data:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handleCall","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"},{"kind":"text","text":") -> ("},{"kind":"keyword","text":"Any"},{"kind":"text","text":", "},{"kind":"keyword","text":"Any"},{"kind":"text","text":")"}],"type":"topic","title":"handleCall(request:data:)","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/handleCall(request:data:)","url":"\/documentation\/swerl\/genserverbehavior\/handlecall(request:data:)","kind":"symbol","required":true,"role":"symbol","abstract":[{"type":"text","text":"Handles synchronous call messages, where the sender awaits a reply."}]},"doc://SwErl/documentation/SwErl/GenServer":{"navigatorTitle":[{"text":"GenServer","kind":"identifier"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServer","role":"symbol","url":"\/documentation\/swerl\/genserver","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GenServer","kind":"identifier"}],"title":"GenServer","abstract":[{"type":"text","text":"Provides the API for creating, messaging, and managing "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances within the SwErl framework."},{"type":"text","text":" "},{"type":"text","text":"This static type facilitates the creation and interaction with "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances, encapsulating the functionality"},{"type":"text","text":" "},{"type":"text","text":"for synchronous and asynchronous communication, process lifecycle management, and state handling."}],"type":"topic"},"doc://SwErl/documentation/SwErl/GenServerBehavior/handleCast(request:data:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"handleCast","kind":"identifier"},{"text":"(","kind":"text"},{"text":"request","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Any","kind":"keyword"},{"kind":"text","text":", "},{"kind":"externalParam","text":"data"},{"kind":"text","text":": "},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?) -> "},{"kind":"keyword","text":"Any"},{"kind":"text","text":"?"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior\/handleCast(request:data:)","type":"topic","title":"handleCast(request:data:)","abstract":[{"text":"Handles asynchronous cast messages, where no reply is expected by the sender.","type":"text"}],"kind":"symbol","url":"\/documentation\/swerl\/genserverbehavior\/handlecast(request:data:)","required":true,"role":"symbol"},"doc://SwErl/documentation/SwErl/GenServerBehavior":{"url":"\/documentation\/swerl\/genserverbehavior","abstract":[{"text":"Defines the behavior for a generic server (","type":"text"},{"code":"GenServer","type":"codeVoice"},{"text":") in the SwErl framework.","type":"text"},{"text":" ","type":"text"},{"code":"GenServerBehavior","type":"codeVoice"},{"text":" protocol allows for the creation of stateful SwErl processes that support synchronous calls and replies through a separate API.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This protocol is designed for user-defined processes, enabling the encapsulation of process state within the registry."},{"type":"text","text":" "},{"type":"text","text":"Types conforming to this protocol are utilized to define the functionality of user-created "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"Multiple, separate "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances can be initiated from a single conforming type. Each instance operates within its own execution context as a separate process."},{"type":"text","text":" "},{"type":"text","text":"Conforming types are recommended to be static, leveraging SwErl infrastructure for state management."}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenServerBehavior"}],"type":"topic","title":"GenServerBehavior","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"GenServerBehavior"}]}}}