{"sections":[],"relationshipsSections":[{"identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","doc:\/\/SwErl\/documentation\/SwErl\/GenStatemBehavior"],"type":"inheritedBy","title":"Inherited By","kind":"relationships"},{"identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/EventManager","doc:\/\/SwErl\/documentation\/SwErl\/GenStateM"],"type":"conformingTypes","title":"Conforming Types","kind":"relationships"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/SwErl\/documentation\/SwErl"]]},"variants":[{"paths":["\/documentation\/swerl\/otpactor_behavior"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"OTPActor_behavior"}]}],"kind":"declarations"},{"content":[{"anchor":"overview","type":"heading","level":2,"text":"Overview"},{"content":[{"inlineContent":[{"type":"text","text":"Lee S. Barney"}],"type":"paragraph"}],"type":"aside","style":"note","name":"Author"},{"content":[{"type":"paragraph","inlineContent":[{"text":"0.1","type":"text"}]}],"type":"aside","style":"note","name":"Version"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"navigatorTitle":[{"text":"OTPActor_behavior","kind":"identifier"}],"role":"symbol","title":"OTPActor_behavior","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}],"roleHeading":"Protocol","symbolKind":"protocol","externalID":"s:5SwErl17OTPActor_behaviorP","modules":[{"name":"SwErl"}]},"abstract":[{"type":"text","text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swift’s "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" BIT (Built In Type)."}],"references":{"doc://SwErl/documentation/SwErl/EventManager":{"navigatorTitle":[{"text":"EventManager","kind":"identifier"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager","role":"symbol","url":"\/documentation\/swerl\/eventmanager","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventManager","kind":"identifier"}],"title":"EventManager","abstract":[{"type":"text","text":"Enumeration containing a set of generic functions responsible for managing communication within _EventManager_s. These functions are designed to:"}],"type":"topic"},"doc://SwErl/documentation/SwErl/OTPActor_behavior":{"navigatorTitle":[{"text":"OTPActor_behavior","kind":"identifier"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior","role":"symbol","url":"\/documentation\/swerl\/otpactor_behavior","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}],"title":"OTPActor_behavior","abstract":[{"type":"text","text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swift’s "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" BIT (Built In Type)."}],"type":"topic"},"doc://SwErl/documentation/SwErl/GenStateM":{"navigatorTitle":[{"text":"GenStateM","kind":"identifier"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenStateM","role":"symbol","url":"\/documentation\/swerl\/genstatem","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GenStateM","kind":"identifier"}],"title":"GenStateM","abstract":[{"type":"text","text":"This enumeration has, as elements, a set of generic functions that conduct"},{"type":"text","text":" "},{"type":"text","text":"the communication required of all statem behaviors. These functions ensure"},{"type":"text","text":" "},{"type":"text","text":"that the hook functions in each custom state machine are executed in the"},{"type":"text","text":" "},{"type":"text","text":"correct order and store updated states correctly."}],"type":"topic"},"doc://SwErl/documentation/SwErl/GenServerBehavior":{"url":"\/documentation\/swerl\/genserverbehavior","abstract":[{"text":"Defines the behavior for a generic server (","type":"text"},{"code":"GenServer","type":"codeVoice"},{"text":") in the SwErl framework.","type":"text"},{"text":" ","type":"text"},{"code":"GenServerBehavior","type":"codeVoice"},{"text":" protocol allows for the creation of stateful SwErl processes that support synchronous calls and replies through a separate API.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This protocol is designed for user-defined processes, enabling the encapsulation of process state within the registry."},{"type":"text","text":" "},{"type":"text","text":"Types conforming to this protocol are utilized to define the functionality of user-created "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"Multiple, separate "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances can be initiated from a single conforming type. Each instance operates within its own execution context as a separate process."},{"type":"text","text":" "},{"type":"text","text":"Conforming types are recommended to be static, leveraging SwErl infrastructure for state management."}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenServerBehavior"}],"type":"topic","title":"GenServerBehavior","role":"symbol","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"GenServerBehavior"}]},"doc://SwErl/documentation/SwErl":{"identifier":"doc:\/\/SwErl\/documentation\/SwErl","type":"topic","title":"SwErl","abstract":[{"text":"Concurrency - Erlang style","type":"text"}],"kind":"symbol","url":"\/documentation\/swerl","role":"collection"},"doc://SwErl/documentation/SwErl/GenStatemBehavior":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenStatemBehavior"}],"navigatorTitle":[{"kind":"identifier","text":"GenStatemBehavior"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenStatemBehavior","type":"topic","title":"GenStatemBehavior","abstract":[{"text":"This protocol enforces the types of behaviors required of every state machine in SwErl. It extends the OTPActor behavior like all non-process SwErl actors.","type":"text"}],"kind":"symbol","url":"\/documentation\/swerl\/genstatembehavior","role":"symbol"}}}