{"hierarchy":{"paths":[["doc:\/\/SwErl\/documentation\/SwErl"]]},"metadata":{"roleHeading":"Protocol","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}],"modules":[{"name":"SwErl"}],"title":"OTPActor_behavior","role":"symbol","externalID":"s:5SwErl17OTPActor_behaviorP","navigatorTitle":[{"text":"OTPActor_behavior","kind":"identifier"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"name":"Author","content":[{"type":"paragraph","inlineContent":[{"text":"Lee S. Barney","type":"text"}]}],"style":"note","type":"aside"},{"name":"Version","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"0.1"}]}],"style":"note","type":"aside"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swerl\/otpactor_behavior"]}],"identifier":{"url":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swift’s "},{"code":"Any","type":"codeVoice"},{"type":"text","text":" BIT (Built In Type)."}],"relationshipsSections":[{"title":"Inherited By","type":"inheritedBy","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","doc:\/\/SwErl\/documentation\/SwErl\/GenStatemBehavior"],"kind":"relationships"},{"title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/EventManager","doc:\/\/SwErl\/documentation\/SwErl\/GenStateM"],"kind":"relationships"}],"kind":"symbol","references":{"doc://SwErl/documentation/SwErl":{"url":"\/documentation\/swerl","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Concurrency - Erlang style"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl","title":"SwErl","role":"collection"},"doc://SwErl/documentation/SwErl/GenStatemBehavior":{"navigatorTitle":[{"text":"GenStatemBehavior","kind":"identifier"}],"url":"\/documentation\/swerl\/genstatembehavior","kind":"symbol","type":"topic","abstract":[{"text":"This protocol enforces the types of behaviors required of every state machine in SwErl. It extends the OTPActor behavior like all non-process SwErl actors.","type":"text"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenStatemBehavior","title":"GenStatemBehavior","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GenStatemBehavior","kind":"identifier"}],"role":"symbol"},"doc://SwErl/documentation/SwErl/GenStateM":{"navigatorTitle":[{"kind":"identifier","text":"GenStateM"}],"url":"\/documentation\/swerl\/genstatem","kind":"symbol","type":"topic","abstract":[{"text":"This enumeration has, as elements, a set of generic functions that conduct","type":"text"},{"text":" ","type":"text"},{"text":"the communication required of all statem behaviors. These functions ensure","type":"text"},{"text":" ","type":"text"},{"text":"that the hook functions in each custom state machine are executed in the","type":"text"},{"text":" ","type":"text"},{"text":"correct order and store updated states correctly.","type":"text"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenStateM","title":"GenStateM","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenStateM"}],"role":"symbol"},"doc://SwErl/documentation/SwErl/EventManager":{"navigatorTitle":[{"kind":"identifier","text":"EventManager"}],"url":"\/documentation\/swerl\/eventmanager","kind":"symbol","type":"topic","abstract":[{"text":"Enumeration containing a set of generic functions responsible for managing communication within _EventManager_s. These functions are designed to:","type":"text"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager","title":"EventManager","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventManager","kind":"identifier"}],"role":"symbol"},"doc://SwErl/documentation/SwErl/GenServerBehavior":{"navigatorTitle":[{"text":"GenServerBehavior","kind":"identifier"}],"url":"\/documentation\/swerl\/genserverbehavior","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Defines the behavior for a generic server ("},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":") in the SwErl framework."},{"type":"text","text":" "},{"type":"codeVoice","code":"GenServerBehavior"},{"type":"text","text":" protocol allows for the creation of stateful SwErl processes that support synchronous calls and replies through a separate API."},{"type":"text","text":" "},{"type":"text","text":"This protocol is designed for user-defined processes, enabling the encapsulation of process state within the registry."},{"type":"text","text":" "},{"type":"text","text":"Types conforming to this protocol are utilized to define the functionality of user-created "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances."},{"type":"text","text":" "},{"type":"text","text":"Multiple, separate "},{"type":"codeVoice","code":"GenServer"},{"type":"text","text":" instances can be initiated from a single conforming type. Each instance operates within its own execution context as a separate process."},{"type":"text","text":" "},{"type":"text","text":"Conforming types are recommended to be static, leveraging SwErl infrastructure for state management."}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","title":"GenServerBehavior","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenServerBehavior"}],"role":"symbol"},"doc://SwErl/documentation/SwErl/OTPActor_behavior":{"navigatorTitle":[{"kind":"identifier","text":"OTPActor_behavior"}],"url":"\/documentation\/swerl\/otpactor_behavior","kind":"symbol","type":"topic","abstract":[{"text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swift’s ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" BIT (Built In Type).","type":"text"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior","title":"OTPActor_behavior","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"OTPActor_behavior"}],"role":"symbol"}}}