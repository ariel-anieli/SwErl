{"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"relationshipsSections":[{"type":"inheritedBy","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","doc:\/\/SwErl\/documentation\/SwErl\/GenStatemBehavior"],"kind":"relationships","title":"Inherited By"},{"type":"conformingTypes","identifiers":["doc:\/\/SwErl\/documentation\/SwErl\/EventManager","doc:\/\/SwErl\/documentation\/SwErl\/GenStateM"],"kind":"relationships","title":"Conforming Types"}],"metadata":{"roleHeading":"Protocol","title":"OTPActor_behavior","externalID":"s:5SwErl17OTPActor_behaviorP","modules":[{"name":"SwErl"}],"navigatorTitle":[{"text":"OTPActor_behavior","kind":"identifier"}],"role":"symbol","symbolKind":"protocol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}]},"hierarchy":{"paths":[["doc:\/\/SwErl\/documentation\/SwErl"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"OTPActor_behavior"}]}],"kind":"declarations"},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"aside","name":"Author","content":[{"inlineContent":[{"type":"text","text":"Lee S. Barney"}],"type":"paragraph"}],"style":"note"},{"type":"aside","name":"Version","content":[{"inlineContent":[{"type":"text","text":"0.1"}],"type":"paragraph"}],"style":"note"}],"kind":"content"}],"kind":"symbol","abstract":[{"text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swift’s ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" BIT (Built In Type).","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swerl\/otpactor_behavior"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior"},"references":{"doc://SwErl/documentation/SwErl/GenServerBehavior":{"abstract":[{"text":"Defines the behavior for a generic server (","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":") in the SwErl framework.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"GenServerBehavior"},{"text":" protocol allows for the creation of stateful SwErl processes that support synchronous calls and replies through a separate API.","type":"text"},{"text":" ","type":"text"},{"text":"This protocol is designed for user-defined processes, enabling the encapsulation of process state within the registry.","type":"text"},{"text":" ","type":"text"},{"text":"Types conforming to this protocol are utilized to define the functionality of user-created ","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":" instances.","type":"text"},{"text":" ","type":"text"},{"text":"Multiple, separate ","type":"text"},{"type":"codeVoice","code":"GenServer"},{"text":" instances can be initiated from a single conforming type. Each instance operates within its own execution context as a separate process.","type":"text"},{"text":" ","type":"text"},{"text":"Conforming types are recommended to be static, leveraging SwErl infrastructure for state management.","type":"text"}],"role":"symbol","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenServerBehavior","title":"GenServerBehavior","type":"topic","kind":"symbol","url":"\/documentation\/swerl\/genserverbehavior","navigatorTitle":[{"text":"GenServerBehavior","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GenServerBehavior","kind":"identifier"}]},"doc://SwErl/documentation/SwErl":{"type":"topic","abstract":[{"type":"text","text":"Concurrency - Erlang style"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl","url":"\/documentation\/swerl","title":"SwErl","role":"collection","kind":"symbol"},"doc://SwErl/documentation/SwErl/OTPActor_behavior":{"abstract":[{"text":"This behavior exists as a base protocol for all non-process SwErl actors. Since it is the base, all types of SwErl actors can be accumulated in shared data structures without resorting to using Swift’s ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" BIT (Built In Type).","type":"text"}],"role":"symbol","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/OTPActor_behavior","title":"OTPActor_behavior","type":"topic","kind":"symbol","url":"\/documentation\/swerl\/otpactor_behavior","navigatorTitle":[{"text":"OTPActor_behavior","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OTPActor_behavior","kind":"identifier"}]},"doc://SwErl/documentation/SwErl/GenStateM":{"kind":"symbol","type":"topic","url":"\/documentation\/swerl\/genstatem","title":"GenStateM","role":"symbol","abstract":[{"type":"text","text":"This enumeration has, as elements, a set of generic functions that conduct"},{"text":" ","type":"text"},{"text":"the communication required of all statem behaviors. These functions ensure","type":"text"},{"text":" ","type":"text"},{"text":"that the hook functions in each custom state machine are executed in the","type":"text"},{"text":" ","type":"text"},{"text":"correct order and store updated states correctly.","type":"text"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenStateM","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"GenStateM"}],"navigatorTitle":[{"kind":"identifier","text":"GenStateM"}]},"doc://SwErl/documentation/SwErl/GenStatemBehavior":{"abstract":[{"text":"This protocol enforces the types of behaviors required of every state machine in SwErl. It extends the OTPActor behavior like all non-process SwErl actors.","type":"text"}],"role":"symbol","identifier":"doc:\/\/SwErl\/documentation\/SwErl\/GenStatemBehavior","title":"GenStatemBehavior","type":"topic","kind":"symbol","url":"\/documentation\/swerl\/genstatembehavior","navigatorTitle":[{"text":"GenStatemBehavior","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"GenStatemBehavior","kind":"identifier"}]},"doc://SwErl/documentation/SwErl/EventManager":{"kind":"symbol","type":"topic","url":"\/documentation\/swerl\/eventmanager","title":"EventManager","role":"symbol","abstract":[{"type":"text","text":"Enumeration containing a set of generic functions responsible for managing communication within _EventManager_s. These functions are designed to:"}],"identifier":"doc:\/\/SwErl\/documentation\/SwErl\/EventManager","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventManager"}],"navigatorTitle":[{"kind":"identifier","text":"EventManager"}]}}}